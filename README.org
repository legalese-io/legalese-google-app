#+TITLE: Documentation for Google Apps Codebase

How does the Legalese Google App work?

* About this Document

This document describes the version 1.0 codebase.

* HOWTO Set Up a Development Environment

To start hacking on the Google App internals, you need to set up a development environment.

** Clone a Company Spreadsheet
First, clone the /[[https://docs.google.com/spreadsheets/d/1rBuKOWSqRE7QgKgF6uVWR9www4LoLho4UjOCHPQplhw/edit#gid=790633300][Legalese Demo Master]]/ if you haven't already. (If you ran the tutorial, you should have cloned it.) To clone it, click on /File/ / /Make a Copy/. Customize it with the name of some made up company.

We will call your copy of the Demo Master a /Company Spreadsheet/.

** Clone the LegaleseMain library.
Open the [[https://script.google.com/a/legalese.io/d/1CaOAsbTSaLPxh2X2CBmSyKhgOw4lVs8f_YoIPDqQp_5YHnsMG2gOgNdD/edit?usp=drive_web][LegaleseMain]] library. That's the [[https://script.google.com/a/legalese.io/d/1CaOAsbTSaLPxh2X2CBmSyKhgOw4lVs8f_YoIPDqQp_5YHnsMG2gOgNdD/edit?usp=drive_web][official production library]]. You don't want to mess with that for development.

Go to /File/ / /Make a Copy/. Now you have a ~Copy of LegaleseMain~. That's the version you will edit.

Close the tab for the original LegaleseMain library.

In your copy of LegaleseMain, go to /File/ / /Manage Versions/. Give your version a name like "init", then ~Save New Version~.

Open /File/ / /Project Properties/. Copy the "project key". It should look something like ~M6YlbsVrWR18KeWvOMc3708UQWaHMB8in~. If you are lazy you can try grabbing the document ID out of the URL bar but that's not officially supported.

** Point your cloned Company Spreadsheet at your cloned Copy of LegaleseMain.
Each Company Spreadsheet has an associated Google Apps Script, which you can get to from /Tools/ / /Script Editor/.

That /Company Script/ comes from ~[[code.js][code.js]]~. It doesn't do much; all the heavy lifting happens inside the LegaleseMain script.

Click on /Libraries/ / /Resources.../.

~Remove~ the existing import of LegaleseMain.

Paste the project key into the ~Find a Library~ box at the bottom of the dialog. Press ~select~.

Set the ~identifier~ to ~legaleseMain~.

Turn on Development Mode.

Hit ~Save~.

** Try running the cloned Incorporation tab.

Go to your cloned Company Spreadsheet. Reload the browser tab, because the script changed.

Go to the Incorporation sheet. You can find it at the bottom row of tabs.

Click on /Add-ons/ / /Generate PDFs/.

Google will ask you to authorize the app. Allow.

When the script finishes, an output link should appear in cell E6.

Open that link.

You should see a bunch of XMLs.

Yay! Your cloned Company Spreadsheet is working well against your cloned LegaleseMain library.

In a few minutes those XMLs should turn into PDFs.

** It Didn't Work.

This section will accumulate Tips & Tricks for handling common failure scenarios along the way to setting up a development environment.

** Try Tweaking Your Cloned LegaleseMain library.

With your development copy of the LegaleseMain library open, go to the ~Code.js~ tab.

In the vicinity of Line 88 you should see a commented out DoNothing.

Uncomment it. Reload your Company Spreadsheet.

If you see the new DoNothing, and calling that function works, then you are now able to make bigger edits! Yay!

* HOWTO push a new version of the library to production

** make sure it works in development
in your personal development environment you should be confident that your new library code works.

** run the test suite on dev
in the glorious future we will have a test suite that gives us this confidence.

** paste the new version of your library code into the production [[https://script.google.com/a/jfdi.asia/d/1CaOAsbTSaLPxh2X2CBmSyKhgOw4lVs8f_YoIPDqQp_5YHnsMG2gOgNdD/edit?usp=drive_web][LegaleseMain]].

If you do not have edit rights to this file, you may have to talk to Meng.

** Under /File/ / /Manage Versions/, snapshot a new version
give it a descriptive name.

** run the test suite on production
is a test suite available? if not, the Glorious Future has not yet arrived.

** if the test suite is not available, test manually using the tutorial.
test it by hand by running through the tutorial as a brand new user.

after cloning the Legalese Demo Master to run the tutorial, under Tools / Script Editor ... Resources / Libraries, import the latest version of the tutorial.

(you might not need to do this, especially if Development Mode is turned on, but it doesn't hurt.)

if the tutorial doesn't work using the latest version of the script, go back and fix it in dev.

** update the Demo Master's library version
if the tutorial does work using the latest version of the script, then:

In the [[https://script.google.com/a/jfdi.asia/macros/d/MOvtp1yA4TI3Xrsv4up74DcUQWaHMB8in/edit?uiv=2&mid=ACjPJvF9VLsvHVoGr7KS_JoRwV78ZMohPaEVG9eADoZumpbHRQ5WTTzLPOstHU6pu-N5vaOywUgDQPNz5zHN4W0zYq-uhrFJjS6TBCRjn4oWzeu6mCI9ts4VBI6PW8wMXUUrf08D3bPO1c8][script for the production Legalese Demo Master]], click on /Resources/ / /Libraries/ and update the library import to the latest version.

** you're done!

* HOWTO debug your script

If you're getting a red error message when you run a script, grab the logs before they disappear.

Open /Tools / Script Editor/.

In the script source interface, open /View / Logs/. Copy and paste those logs to a text file or email somewhere.

In the script source interface, open /View / Execution Transcript/. Copy and paste the execution transcript.

The logs are output by Logger.log calls. (In Legalese, ~xxLog~ wrappers are defined in each ~.js~ library; see the bottom of ~util.js~.)

The execution transcript is output by the Google Apps Script system itself.

Usually, the cause of the red error message of death can be found at the bottom of either the logs or the execution transcript, because that's where Google Apps Script gave up.

If you're reporting a bug to a developer, using email or a Github issue, please include both the logs and the execution transcript as attachments in your bug report, and also include the last few lines of both in the body of your report.

The error may be inside an XML template instead of a ~.js~ library. In that case, see [[https://developers.google.com/apps-script/guides/html/templates#debugging_templates][Google Apps on Debugging Templates]], and good luck.

* About the Company Spreadsheet
A Legalese Company Spreadsheet contains one or more sheets, appearing as tabs:
- Entities
- Cap Table
- Incorporation
- Seed Round
- More Rounds

If you cloned the Legalese Demo Master, you will have something that looks like this.

** The Bound Legalese Script
In any Legalese Company Spreadsheet, if you go to *Tools / Script Editor*, you will see a bunch of code. This code references the LegaleseMain Library.

*** In the future we will release Legalese as a Google Add-On proper.

Then the script won't be bound.

** legaleseMain.js
https://script.google.com/a/jfdi.asia/d/1CaOAsbTSaLPxh2X2CBmSyKhgOw4lVs8f_YoIPDqQp_5YHnsMG2gOgNdD/edit?usp=drive_web

Every time you update a component, you will need to copy that component from your local editor into the Google App.

** Library Version Management
If you make a significant change, you will need to, under Manage Versions, save a new version of the LegaleseMain library.

Then you MUST go to the Legalese Demo Master and in its *Tools / Script Editor* update the lirbray version.

** legaleseSignature.js
At present this only works for Meng's account to insert things into EchoSign. It contains his application keys and is therefore not really public.

** Makefile
the Makefile inserts Meng's application keys into the actual built legaleseSignature.js.

* Parsing Spreadsheets
Getting data from a spreadsheet into an internal Javascript representation is the job of a bunch of parsing modules.
** captable.js
** readrows.js
** templates.js

* User Interface Sugar
We make it easy for parties to fill in their details.

** form.js

* The Controller
End-users usually run commands like *Add-Ons / Legalese / Generate PDFs* directly from the relevant tab of the spreadsheet.

But an administrator who manages several deals or companies at the same time may find it easier to use the Controller interface.

In the Controller, all tabs are listed on a single spreadsheet.

When a command is run, and the current sheet is a controller sheet, the command operates on whatever row is selected. More than one row may be selected.

** controller.js

* Utilities
** util.js
** format.js
** lingua.js
** owl.js

* Unused or under development
** dependencies.js
** unused.js
** drawCompany.s
** svg.js
** esop.js

